local chaosBagApi          = require("chaosbag/ChaosBagApi")
local deckImporterApi      = require("arkhamdb/DeckImporterApi")
local globalApi            = require("core/GlobalApi")
local guidReferenceApi     = require("core/GUIDReferenceApi")
local navigationOverlayApi = require("core/NavigationOverlayApi")
local playAreaApi          = require("playarea/PlayAreaApi")
local playermatApi         = require("playermat/PlayermatApi")
local tokenArrangerApi     = require("tokens/TokenArrangerApi")

-- base data for token creation
local saveTokenData        = {
  Name = "Custom_Model_Bag",
  Transform = {
    posX = -21.25,
    posY = 1.68,
    posZ = 55.59,
    rotX = 0,
    rotY = 270,
    rotZ = 0,
    scaleX = 2,
    scaleY = 2,
    scaleZ = 2
  },
  Description = "SCED Importer Token\n\nSave me (Right-Click: Save as object)! Then you can import me on any fresh game to apply the saved settings / campaign state.",
  Tags = { "ImporterToken" },
  CustomMesh = {
    MeshURL = "https://steamusercontent-a.akamaihd.net/ugc/943949966265929204/A38BB5D72419E6298385556D931877C0A1A55C17/",
    DiffuseURL =
    "https://steamusercontent-a.akamaihd.net/ugc/254843371583188147/920981125E37B5CEB6C400E3FD353A2C428DA969/",
    ColliderURL =
    "https://steamusercontent-a.akamaihd.net/ugc/943949966265929204/A38BB5D72419E6298385556D931877C0A1A55C17/",
    Convex = true,
    MaterialIndex = 2,
    TypeIndex = 6,
    CustomShader = {
      SpecularColor = { r = 0.72, g = 0.51, b = 0.34 },
      SpecularIntensity = 0.4,
      SpecularSharpness = 7.0,
      FresnelStrength = 0.0
    }
  }
}

function onLoad()
  self.createButton({
    click_function = "onClick_export",
    function_owner = self,
    label = "Export",
    tooltip = "Create a campaign save token!",
    position = { x = -1, y = 0.21, z = 0 },
    font_size = 400,
    width = 1400,
    height = 600,
    scale = { 0.5, 1, 0.5 }
  })
end

---------------------------------------------------------
-- TTS event handling
---------------------------------------------------------

function onObjectLeaveContainer(container)
  if container.hasTag("ImporterToken") then
    broadcastToAll("Removing objects from the 'Save Token' will break functionality. Return the objects.", "Yellow")
  end
end

function onObjectEnterContainer(container)
  if container.hasTag("ImporterToken") then
    broadcastToAll("Adding objects to the 'Save Token' will break functionality. Remove the objects.", "Yellow")
  end
end

function onCollisionEnter(info)
  if info.collision_object.hasTag("ImporterToken") then
    coin = info.collision_object
    startLuaCoroutine(self, "importFromToken")
  end
end

---------------------------------------------------------
-- main import functionality
---------------------------------------------------------

function importFromToken()
  broadcastToAll("Import initiated")
  local importData = JSON.decode(coin.getGMNotes())

  -- import the campaign data
  local campaignBox
  if importData["box"] then
    campaignBox = getObjectFromGUID(importData["box"])
    if not campaignBox or campaignBox.type == "Generic" then
      broadcastToAll("Campaign Box not found!", "Red")
      printToAll("Make sure it is not a placeholder box (-> press the 'Download' button if it has one).")
    end
  end

  -- trigger the place function of the memory bag
  if campaignBox and campaignBox.type == "Bag" and #campaignBox.getObjects() > 0 then
    campaignBox.call("buttonClick_place")
    coWaitFrames(5)
  end

  -- spawn stored campaign log and additional player card bag
  for _, objData in ipairs(coin.getData().ContainedObjects or {}) do
    objData.Locked = true
    local spawnData = { data = objData }

    -- maybe restore position of item and destroy duplicate
    if objData.Nickname == "Additional Player Cards" then
      local additionalIndex = guidReferenceApi.getObjectByOwnerAndType("Mythos", "AdditionalPlayerCardsBag")
      if additionalIndex then
        objData.GUID = additionalIndex.getGUID()
        spawnData.position = additionalIndex.getPosition()

        -- merge contained objects
        local existingIndexData = additionalIndex.getData()
        objData.ContainedObjects = objData.ContainedObjects or {}

        -- lookup table by Nickname
        local containedObjectLookUp = {}
        for _, deepData in ipairs(objData.ContainedObjects) do
          if deepData.Nickname ~= "" then
            containedObjectLookUp[deepData.Nickname] = true
          end
        end

        -- add existing objects to new box
        for _, deepData in ipairs(existingIndexData.ContainedObjects or {}) do
          if deepData.Nickname ~= "" and containedObjectLookUp[deepData.Nickname] ~= true then
            table.insert(objData.ContainedObjects, deepData)
          end
        end

        additionalIndex.destruct()
      end
    else
      local campaignLog = findUniqueObjectWithTag("CampaignLog")
      if campaignLog then
        spawnData.position = campaignLog.getPosition()
        campaignLog.destruct()
      end
    end

    spawnObjectData(spawnData)
    coWaitFrames(5)
  end

  -- update chaos bag
  if importData["bag"] then
    chaosBagApi.setChaosBagState(importData["bag"])
  end

  -- update playermat damage/horror counters
  if importData["trauma"] then
    setTrauma(importData["trauma"])
  end

  -- populate deck IDs on Deck Importer
  if importData["decks"] then
    deckImporterApi.setUiState(importData["decks"])
  end

  -- maybe set campaign guide page (unless it was on the first page)
  if importData["guide"] and importData["guide"] ~= 0 then
    local campaignGuide = findUniqueObjectWithTag("CampaignGuide")
    if campaignGuide then
      campaignGuide.Book.setPage(importData["guide"])
    end
  end

  if importData["options"] then
    globalApi.loadOptionPanelState(importData["options"])
    coWaitFrames(5)
  end

  -- destroy Tour Starter token
  local tourStarter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "TourStarter")
  if tourStarter then
    tourStarter.destruct()
  end

  -- restore PlayArea image and player count
  if importData["playarea"] then
    playAreaApi.updateSurface(importData["playarea"])
    coWaitFrames(5)
  end

  if importData["clueCount"] then
    playAreaApi.setInvestigatorCount(importData["clueCount"])
  end

  -- restore playermat slots
  if importData["slotData"] then
    for matColor, slotData in pairs(importData["slotData"]) do
      playermatApi.loadSlotData(matColor, slotData)
    end
  end

  -- restore Clean Up Helper state
  if importData["CleanUpHelperState"] then
    local cleanUpHelper = guidReferenceApi.getObjectByOwnerAndType("Mythos", "CleanUpHelper")
    if cleanUpHelper ~= nil then
      cleanUpHelper.call("loadData", importData["CleanUpHelperState"])
    end
  end

  -- restore Navigation Overlay state
  if importData["NavigationOverlayState"] then
    navigationOverlayApi.loadData(importData["NavigationOverlayState"])
  end

  -- restore Token Arranger state
  if importData["TokenArrangerState"] then
    tokenArrangerApi.loadData(importData["TokenArrangerState"])
  end

  -- maybe remove Phase Tracker
  if importData["removePhaseTracker"] then
    for _, obj in ipairs(getObjectsWithTag("LinkedPhaseTracker")) do
      obj.destruct()
    end
  end

  -- enable Token Removers
  if importData["enableTokenRemover"] then
    for _, obj in pairs(guidReferenceApi.getObjectsByType("TokenRemover")) do
      obj.call("enable")
    end
  end

  coin.destruct()
  broadcastToAll("Import completed!", "Green")
  return 1
end

function onClick_export(_, clickedByColor)
  playerColor = clickedByColor
  startLuaCoroutine(self, "exportToToken")
end

-- creates a campaign token with save data encoded into GM Notes based on the current state of the table
function exportToToken()
  broadcastToAll("Export initiated")

  local dataToSave = {}

  -- find active campaign
  local campaignBox
  for _, obj in ipairs(getObjectsWithTag("CampaignBox")) do
    if obj.type == "Bag" and #obj.getObjects() == 0 then
      if not campaignBox then
        campaignBox = obj
      else
        broadcastToAll("Multiple empty campaign boxes detected; delete all but one.", "Red")
      end
    end
  end

  if not campaignBox then
    broadcastToAll("Campaign box with all objects placed not found! Skipping campaign data saving.", "Red")
  else
    dataToSave.box = campaignBox.getGUID()
  end

  chaosBagApi.releaseAllSealedTokens(playerColor)
  coWaitFrames(5)

  -- main data collection
  dataToSave.bag                 = chaosBagApi.getChaosBagState()
  dataToSave.decks               = deckImporterApi.getUiState()
  dataToSave.clueCount           = playAreaApi.getInvestigatorCount()
  dataToSave.playarea            = playAreaApi.getSurface()
  dataToSave.options             = globalApi.getOptionPanelState()

  -- need to reset the contained objects to support multiple exports
  saveTokenData.ContainedObjects = {}

  if campaignBox then
    -- save campaign log if present
    local campaignLog = findUniqueObjectWithTag("CampaignLog")
    if campaignLog then
      local logData = campaignLog.getData()
      logData.Locked = false
      table.insert(saveTokenData.ContainedObjects, logData)

      -- maybe also extract the trauma values
      local trauma = campaignLog.getVar("returnTrauma")
      if trauma then
        printToAll("Trauma values found in campaign log!", "Green")
        dataToSave.trauma = {}
        for _, val in ipairs(campaignLog.call("returnTrauma")) do
          table.insert(dataToSave.trauma, val)
        end
      else
        printToAll("Trauma values could not be found in campaign log!", "Yellow")
      end
    end

    -- store campaign guide page if present
    local campaignGuide = findUniqueObjectWithTag("CampaignGuide")
    if campaignGuide then
      dataToSave.guide = campaignGuide.Book.getPage()
    end
  end

  -- store the additional index if there are any cards in it
  local additionalIndex = guidReferenceApi.getObjectByOwnerAndType("Mythos", "AdditionalPlayerCardsBag")
  if additionalIndex and #additionalIndex.getObjects() > 0 then
    local indexData = additionalIndex.getData()
    indexData.Locked = false
    table.insert(saveTokenData.ContainedObjects, indexData)
  end

  -- get the slot symbol data for each playermat (use GUIDReferenceApi to only get this for existing playermats)
  dataToSave.slotData = {}
  for matColor, _ in pairs(guidReferenceApi.getObjectsByType("Playermat")) do
    local slotData = playermatApi.getSlotData(matColor)
    dataToSave.slotData[matColor] = slotData
  end

  -- get Clean Up Helper settings
  local cleanUpHelper = guidReferenceApi.getObjectByOwnerAndType("Mythos", "CleanUpHelper")
  if cleanUpHelper ~= nil then
    dataToSave.CleanUpHelperState = cleanUpHelper.call("getSaveData", {})
  end

  -- get Navigation Overlay settings
  dataToSave.NavigationOverlayState = navigationOverlayApi.getSaveData()

  -- get Token Arranger settings
  dataToSave.TokenArrangerState = tokenArrangerApi.getSaveData()

  -- check if Phase Tracker exists
  local objectList = getObjectsWithTag("LinkedPhaseTracker")
  if #objectList == 0 then
    dataToSave.removePhaseTracker = true
  end

  -- check if Token Removers are enabled
  for _, obj in pairs(guidReferenceApi.getObjectsByType("TokenRemover")) do
    if obj.getVar("state") == true then
      dataToSave.enableTokenRemover = true
      break
    end
  end

  -- finish the data for the campaign token
  saveTokenData.GMNotes = JSON.encode(dataToSave)
  saveTokenData.Nickname = os.date("%Y_%m_%d") .. " Save"
  if campaignBox then
    saveTokenData.Nickname = saveTokenData.Nickname .. " (" .. campaignBox.getName() .. ")"
  end

  spawnObjectData({ data = saveTokenData })
  broadcastToAll("Export completed! Save coin object to import on a different save.", "Green")
  return 1
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

-- pauses the current coroutine for 'frameCount' frames
function coWaitFrames(frameCount)
  for k = 1, frameCount do
    coroutine.yield(0)
  end
end

function findUniqueObjectWithTag(tag)
  local objects = getObjectsWithTag(tag)
  if not objects then return end

  if #objects == 1 then
    return objects[1]
  elseif #objects == 0 then
    broadcastToAll("No " .. tag .. " detected; ensure it has the correct tag.", "Orange")
  else
    broadcastToAll("More than one " .. tag .. " detected; delete all but one.", "Orange")
  end
end

function setTrauma(trauma)
  for i, matColor in ipairs({ "White", "Orange", "Green", "Red" }) do
    playermatApi.updateCounter(matColor, "DamageCounter", trauma[i])
    playermatApi.updateCounter(matColor, "HorrorCounter", trauma[i + 4])
  end
end

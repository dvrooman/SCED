local guidReferenceApi = require("core/GUIDReferenceApi")
local mythosAreaApi    = require("mythos/MythosAreaApi")
local playAreaApi      = require("playarea/PlayAreaApi")
local searchLib        = require("util/SearchLib")

local optionsVisible   = false
local options          = {
  Agenda = true,
  Playarea = true,
  Playermats = true
}

val                    = 0
self.max_typed_number  = 99

-- save current value and options
function onSave() return JSON.encode({ val, options }) end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    val              = loadedData[1]
    options          = loadedData[2]

    -- restore state for option panel
    for key, bool in pairs(options) do
      if bool == false then changeLabel(key) end
    end
  end

  self.createButton({
    label          = tostring(val),
    click_function = "addOrSubtract",
    function_owner = self,
    position       = { 0, 0.06, 0 },
    height         = 800,
    width          = 800,
    font_size      = 650,
    scale          = { 1.5, 1.5, 1.5 },
    font_color     = { 1, 1, 1, 95 },
    color          = { 0, 0, 0, 0 }
  })
end

-- called by the invisible button to change displayed value
function addOrSubtract(_, _, isRightClick)
  local newVal = math.min(math.max(val + (isRightClick and -1 or 1), 0), 99)
  if val ~= newVal then
    updateVal(newVal)
  end
end

-- adds the provided number to the current count
function addVal(number)
  val = val + number
  updateVal(val)
end

-- sets the current count to the provided number
function updateVal(number)
  val = number or 0
  self.editButton({ index = 0, label = tostring(val) })
  if number then
    broadcastDoom(val)
  else
    broadcastToAll("0 doom on the agenda")
  end
end

function onNumberTyped(_, number)
  updateVal(number)
end

-- called by updateVal and addVal to broadcast total doom in play or on the agenda
-- shows "Doom on the Agenda / Doom Threshold" if metadata is present
-- otherwise shows total "Doom in Play"
function broadcastDoom(val)
  local md = getDoomMetadata()
  local mod = getDoomThresholdModifier()
  local invCount = playAreaApi.getInvestigatorCount()

  -- maybe apply additional doom threshold for solo play
  local soloDoomThreshold = 0
  if invCount == 1 then
    soloDoomThreshold = md.additionalDoomForSolo or 0
  end

  -- sum the doom thresholds and modifiers
  local doomThreshold = (md.doomThreshold or 0) + mod + (md.doomThresholdPerInvestigator or 0) * invCount + soloDoomThreshold

  local doomInPlayCounter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DoomInPlayCounter")
  if doomInPlayCounter and md.subtractDoomInPlay then
    local previousState = doomInPlayCounter.call("toggleSubtractDoom", true)
    if previousState == false then
      broadcastToAll("Right-click the small 'Doom in Play' counter and select 'Toggle Doom Mode' to change this.")
    end
  end
  local doomInPlay = doomInPlayCounter and doomInPlayCounter.call("getDoomCount") or 0
  local totalDoom = val + doomInPlay

  local broadcastParts = {}

  -- construct the first part of the message
  table.insert(broadcastParts, val)
  table.insert(broadcastParts, " doom on the agenda (")

  -- add the middle part
  if doomThreshold - mod > 0 then
    -- maybe add color if threshold is reached
    if totalDoom >= doomThreshold then
      table.insert(broadcastParts, "[" .. Color.fromString("Red"):toHex() .. "]")
    end

    table.insert(broadcastParts, totalDoom)
    table.insert(broadcastParts, "/" .. doomThreshold)

    -- end the coloring
    if totalDoom >= doomThreshold then
      table.insert(broadcastParts, "[-]")
    end

    table.insert(broadcastParts, " total)")
  else
    table.insert(broadcastParts, val + doomInPlay)
    if doomInPlay < 0 then
      table.insert(broadcastParts, " total)")
    else
      table.insert(broadcastParts, " in play)")
    end
  end

  broadcastToAll(table.concat(broadcastParts, ""))

  -- maybe let players know about modifier
  if mod ~= 0 then
    printToAll("Doom Threshold was modified by " .. mod .. " due to cards in play.", "Orange")
  end
end

-- called by "Reset" button to remove doom
function startReset()
  if options.Agenda then
    -- omitting the number will broadcast a special message just for this case
    updateVal()
  end
  local doomInPlayCounter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DoomInPlayCounter")
  if doomInPlayCounter then
    doomInPlayCounter.call("removeDoom", options)
  end
end

-- get doom threshold from top card of Agenda deck
function getDoomMetadata()
  local agendaPos = mythosAreaApi.getAgendaPosition()
  local searchResult = searchLib.atPosition(agendaPos, "isCardOrDeck")

  if #searchResult == 1 then
    local obj = searchResult[1]
    if obj.type == "Card" then
      return JSON.decode(obj.getGMNotes()) or {}
    else
      -- handle agenda deck
      local containedObjects = obj.getData().ContainedObjects
      local topCardData = containedObjects[#containedObjects]
      return JSON.decode(topCardData.GMNotes) or {}
    end
  end
  return {}
end

function getDoomThresholdModifier()
  local mod = 0
  local appliedModifierGUIDs = {}

  -- check playarea
  local playAreaZone = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  for _, obj in ipairs(playAreaZone.getObjects()) do
    if not obj.is_face_down and obj.type == "Card" then
      local md = JSON.decode(obj.getGMNotes()) or {}
      mod = mod + (md.modifyDoomThreshold or 0)
      appliedModifierGUIDs[obj.getGUID()] = true
    end
  end

  -- check mythos area (make sure we don't apply cards twice that are in both areas)
  local mythosArea = guidReferenceApi.getObjectByOwnerAndType("Mythos", "MythosArea")
  for _, obj in ipairs(searchLib.onObject(mythosArea, "isCard", Vector(0.9, 1, 0.9))) do
    if not obj.is_face_down and appliedModifierGUIDs[obj.getGUID()] == nil then
      local md = JSON.decode(obj.getGMNotes()) or {}
      mod = mod + (md.modifyDoomThreshold or 0)
    end
  end
  return mod
end

-- XML UI functions
function optionClick(_, optionName)
  options[optionName] = not options[optionName]
  changeLabel(optionName)
  printToAll("Doom removal of " .. optionName .. (options[optionName] and " enabled" or " disabled"))
end

function toggleOptions()
  optionsVisible = not optionsVisible

  if optionsVisible then
    self.UI.show("Options")
  else
    self.UI.hide("Options")
  end
end

function changeLabel(optionName)
  local label = self.UI.getAttribute("option" .. optionName, "text")
  if options[optionName] == true then
    self.UI.setAttribute("option" .. optionName, "text", string.gsub(label, "☐", "☑"))
  else
    self.UI.setAttribute("option" .. optionName, "text", string.gsub(label, "☑", "☐"))
  end
end

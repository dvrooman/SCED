local guidReferenceApi = require("core/GUIDReferenceApi")
local playermatApi     = require("playermat/PlayermatApi")

local ZONE, TRASH
local IGNORE_TAG       = "DoomCounter_ignore"
local TOTAL_PLAY_AREA  = {
  upperLeft = { x = -9, z = -35 },
  lowerRight = { x = -60, z = 35 }
}
local subtractDoom     = false

function updateSave()
  self.script_state = JSON.encode(subtractDoom)
end

-- create button, context menu and start loop
function onLoad(savedData)
  if savedData and savedData ~= "" then
    subtractDoom = JSON.decode(savedData) or false
  end

  self.addContextMenuItem("Toggle Doom Mode", function() toggleSubtractDoom() end)
  self.createButton({
    label = "0",
    click_function = "none",
    function_owner = self,
    position = { 0, 0.06, 0 },
    height = 0,
    width = 0,
    scale = { 1.5, 1.5, 1.5 },
    font_size = 600,
    font_color = { 1, 1, 1, 100 },
    color = { 0, 0, 0, 0 }
  })

  TRASH = guidReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  ZONE = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaZone")
  Wait.time(updateCounter, 2, -1)
end

function toggleSubtractDoom(override)
  local previousState = subtractDoom
  if override ~= nil then
    subtractDoom = override
  else
    subtractDoom = not subtractDoom
  end

  -- early exit if nothing was changed
  if previousState == subtractDoom then return previousState end

  updateSave()

  if subtractDoom then
    broadcastToAll("Doom in play: Now subtracts from the total doom count.", "Orange")
  else
    broadcastToAll("Doom in play: Now adds to the total doom count.", "Orange")
  end
end

-- main function
function updateCounter()
  local count = countDoomInPlay()
  self.editButton({ index = 0, label = tostring(count) })
end

-- get doom in play
function countDoomInPlay()
  local count = 0

  for _, obj in ipairs(getObjects()) do
    count = count + getDoomAmount(obj)
  end

  return count
end

-- returns the doom count (for an outside call)
function getDoomCount()
  local count = countDoomInPlay()
  local mult = subtractDoom and -1 or 1
  return mult * count
end

-- gets quantity (for stacks) of doom
function getDoomAmount(obj, disregardIgnoreTag)
  if (obj.is_face_down and obj.getMemo() == "clueDoom") and (not obj.hasTag(IGNORE_TAG) or disregardIgnoreTag)
      and inArea(obj.getPosition(), TOTAL_PLAY_AREA) then
    return math.abs(obj.getQuantity())
  elseif obj.getMemo() == "DoomCounter" and (not obj.hasTag(IGNORE_TAG) or disregardIgnoreTag)
      and inArea(obj.getPosition(), TOTAL_PLAY_AREA) then
    return obj.getVar("val")
  else
    return 0
  end
end

-- removes doom from playermats / playarea
function removeDoom(options)
  if options.Playermats then
    local count = removeDoomFromList(playermatApi.searchAroundPlayermat("All"))
    if count > 0 then
      broadcastToAll(count .. " doom removed from playermats.", "White")
    end
  end

  if options.Playarea then
    local count = removeDoomFromList(ZONE.getObjects())
    if count > 0 then
      broadcastToAll(count .. " doom removed from play area.", "White")
    end
  end
end

-- removes doom from provided object list and returns the removed amount
function removeDoomFromList(objList)
  local count = 0
  for _, obj in ipairs(objList) do
    local amount = getDoomAmount(obj, true)
    if amount > 0 then
      if obj.getMemo() == "DoomCounter" then
        obj.call("updateVal", 0)
      else
        TRASH.putObject(obj)
      end
      count = count + amount
    end
  end
  return count
end

-- helper function to check if a position is inside an area
function inArea(point, bounds)
  return (point.x < bounds.upperLeft.x
    and point.x > bounds.lowerRight.x
    and point.z > bounds.upperLeft.z
    and point.z < bounds.lowerRight.z)
end

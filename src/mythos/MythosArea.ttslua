require("core/Constants")
local deckLib                     = require("util/DeckLib")
local GlobalApi                   = require("core/GlobalApi")
local guidReferenceApi            = require("core/GUIDReferenceApi")
local playAreaApi                 = require("playarea/PlayAreaApi")
local playermatApi                = require("playermat/PlayermatApi")
local searchLib                   = require("util/SearchLib")
local tokenArrangerApi            = require("tokens/TokenArrangerApi")
local tokenSpawnTrackerApi        = require("tokens/TokenSpawnTrackerApi")

local ENCOUNTER_DECK_DISCARD_AREA = {
  upperLeft  = { x = 1.770, z = 0.15 },
  lowerRight = { x = 0.700, z = 0.59 },
  center     = { x = 1.235, y = 0.5, z = 0.37 },
  size       = Vector(0.5, 3, 0.2)
}
local SCENARIO_REFERENCE_AREA     = {
  upperLeft  = { x = -1.45, z = 0.15 },
  lowerRight = { x = -1.75, z = 0.59 }
}

local isReshuffling               = false
local collisionEnabled            = false
local currentScenario, useFrontData, tokenData, scenarioCard

-- for stopping multiple collisions of the same object
local collisionTable              = {}

function updateSave()
  local data = {
    currentScenario = currentScenario,
    useFrontData    = useFrontData,
    tokenData       = tokenData
  }
  if scenarioCard ~= nil then
    data.scenarioCardGuid = scenarioCard.getGUID()
  end
  self.script_state = JSON.encode(data)
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedState = JSON.decode(savedData) or {}
    scenarioCard      = getObjectFromGUID(loadedState.scenarioCardGuid) or nil
    currentScenario   = loadedState.currentScenario or ""
    useFrontData      = loadedState.useFrontData or true
    tokenData         = loadedState.tokenData or {}
  end
  Wait.time(function() collisionEnabled = true end, 0.1)
end

function copyScenarioReferenceCard()
  if scenarioCard == nil then
    broadcastToAll("No scenario reference card found.", "Red")
    return
  end

  local usedColors = playermatApi.getUsedMatColors()
  if #usedColors == 0 then
    broadcastToAll("No investigators placed.", "Red")
    return
  end

  for _, color in ipairs(usedColors) do
    local cardPosition = playermatApi.transformLocalPosition({ -1.365, 0.1, -0.625 }, color)
    local searchResult = searchLib.atPosition(cardPosition, "isCardOrDeck")
    if #searchResult == 0 then
      scenarioCard.clone({ position = cardPosition, snap_to_grid = true })
    elseif #searchResult == 1 then
      local obj = searchResult[1]
      local md = JSON.decode(obj.getGMNotes()) or {}

      if obj.getName() == "Scenario" or md.type == "ScenarioReference" then
        local trash = guidReferenceApi.getObjectByOwnerAndType(color, "Trash")
        trash.putObject(obj)
        scenarioCard.clone({ position = cardPosition, snap_to_grid = true })
      end
    end
  end
end

---------------------------------------------------------
-- collison and container event handling
---------------------------------------------------------

-- TTS event handler. Handles scenario name event triggering and encounter card token resets.
function onCollisionEnter(collisionInfo)
  if not collisionEnabled then return end

  local object = collisionInfo.collision_object

  -- early exit for better performance
  if object.type ~= "Card" then return end

  -- only continue if card didn't already collide
  if collisionTable[object] ~= nil then return end
  collisionTable[object] = true
  Wait.frames(function() collisionTable[object] = nil end, 1)

  local localPos = self.positionToLocal(object.getPosition())

  if inArea(localPos, ENCOUNTER_DECK_DISCARD_AREA) then
    -- reset spawned tokens and remove tokens from cards in encounter deck / discard area
    Wait.frames(function() tokenSpawnTrackerApi.resetTokensSpawned(object) end, 1)
    GlobalApi.handleTokenDetaching(object)
    GlobalApi.removeTokensFromObject(object, "Mythos")
  elseif inArea(localPos, SCENARIO_REFERENCE_AREA) then
    -- detect scenario reference card and attempt to load data from it
    local md = JSON.decode(object.getGMNotes()) or {}
    local cardName = object.getName()

    if cardName == "Scenario" or md.type == "ScenarioReference" then
      scenarioCard = object
      scenarioCard.setPosition({ -3.85, 1.60, -10.39 })
      getDataFromReferenceCard(scenarioCard, cardName, md)
    end
  end
end

-- maybe load data from reference card
function getDataFromReferenceCard(card, cardName, md)
  local newScenarioName
  if cardName == "Scenario" then
    newScenarioName = card.getDescription()
  else
    newScenarioName = cardName
  end

  -- detect if a new scenario card is placed down
  if currentScenario ~= newScenarioName then
    currentScenario = newScenarioName
    fireScenarioChangedEvent()
  end

  if not md["tokens"] then
    tokenData = {}
    updateSave()
    return
  end

  -- detect orientation of scenario card (for difficulty)
  useFrontData = not card.is_face_down
  tokenData = md["tokens"][(useFrontData and "front" or "back")]
  fireTokenDataChangedEvent()
end

-- TTS event handler. Handles scenario name event triggering
function onCollisionExit(collisionInfo)
  local object = collisionInfo.collision_object

  -- reset token metadata if scenario reference card is removed
  if object == scenarioCard then
    tokenData = {}
    useFrontData = nil
    scenarioCard = nil
    fireTokenDataChangedEvent()
  end
end

-- Listens for cards entering the encounter deck or encounter discard, discards tokens on them,
-- and resets the spawn state for the cards when they do.
function onObjectEnterContainer(container, object)
  local localPos = self.positionToLocal(container.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_DISCARD_AREA) then
    tokenSpawnTrackerApi.resetTokensSpawned(object)
    GlobalApi.removeTokensFromObject(object, "Mythos")
  end
end

-- fires if the scenario title changes
function fireScenarioChangedEvent()
  -- maybe show the title splash screen
  Wait.frames(function() GlobalApi.titleSplash(currentScenario) end, 20)

  -- set the scenario for the playarea (connections might be disabled)
  playAreaApi.onScenarioChanged(currentScenario)

  -- maybe update the playarea image
  local playAreaImageSelector = guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayAreaImageSelector")
  playAreaImageSelector.call("maybeUpdatePlayAreaImage", currentScenario)

  -- reset the token spawning for locations
  tokenSpawnTrackerApi.resetAllLocations()
end

-- fires if the scenario title or the difficulty changes
function fireTokenDataChangedEvent()
  local fullData = returnTokenData()
  tokenArrangerApi.onTokenDataChanged(fullData)
  updateSave()
end

-- returns the chaos token metadata (if provided)
function returnTokenData()
  return {
    tokenData       = tokenData,
    currentScenario = currentScenario,
    useFrontData    = useFrontData
  }
end

---------------------------------------------------------
-- encounter card drawing
---------------------------------------------------------

-- gets the encounter deck objects (for internal functions and Api calls)
function getEncounterDeckObjects()
  local encounterDeckObjects = {}
  local center = self.positionToWorld(ENCOUNTER_DECK_DISCARD_AREA.center)
  local size   = ENCOUNTER_DECK_DISCARD_AREA.size * self.getScale()

  for _, object in ipairs(searchLib.inArea(center, self.getRotation(), size, "isCardOrDeck")) do
    if self.positionToLocal(object.getPosition()).x > 1.25 then
      encounterDeckObjects.discard = object
    elseif object.type == "Card" and not object.is_face_down then
      encounterDeckObjects.topCard = object
    else
      encounterDeckObjects.draw = object
    end
  end

  return encounterDeckObjects
end

-- 'params' contains the position, rotation and a boolean to force a faceup draw
function drawEncounterCard(params)
  local encounterDeckObjects = getEncounterDeckObjects()
  local reshuffledAlready

  if encounterDeckObjects.draw or encounterDeckObjects.topCard then
    reshuffledAlready = false
    if encounterDeckObjects.topCard then
      actualEncounterCardDraw(encounterDeckObjects.topCard, params)
      flipTopCardFromDeck()
    elseif encounterDeckObjects.draw.type == "Deck" then
      actualEncounterCardDraw(encounterDeckObjects.draw.takeObject(), params)
    else
      actualEncounterCardDraw(encounterDeckObjects.draw, params)
    end
  else
    -- nothing here, time to reshuffle
    if reshuffledAlready == true then
      reshuffledAlready = false
      return
    end

    -- if there is no discard pile either, reshuffleEncounterDeck will give an error message already
    local success = reshuffleEncounterDeck()

    -- only continue if there was a discard pile
    if not success then return end
    reshuffledAlready = true
    drawEncounterCard(params)
  end
end

-- draw the provided card to the requesting playermat
function actualEncounterCardDraw(card, params)
  local metadata = JSON.decode(card.getGMNotes()) or {}
  local DATA_HELPER = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DataHelper")

  -- draw hidden cards facedown
  local faceUpRotation = 0
  if metadata.hidden or DATA_HELPER.call('checkHiddenCard', card.getName()) then
    faceUpRotation = 180
  end

  local rot = playermatApi.returnRotation(params.matColor):setAt("z", faceUpRotation)
  deckLib.placeOrMergeIntoDeck(card, params.position, rot)
end

-- gets the discard pile and shuffles it into the encounter deck
---@return boolean: Whether the operation was successfully performed
function reshuffleEncounterDeck()
  -- flag to avoid multiple calls
  if isReshuffling then return false end
  isReshuffling = true

  -- disable flag after 1s delay
  Wait.time(function() isReshuffling = false end, 1)

  local encounterDeckObjects = getEncounterDeckObjects()

  if encounterDeckObjects.discard then
    -- flips discard pile
    if not encounterDeckObjects.discard.is_face_down then
      encounterDeckObjects.discard.setRotation({ 0, -90, 180 })
    end

    -- make a new encounter deck
    encounterDeckObjects.discard.setPosition(Vector(ENCOUNTER_DECK_POS) + Vector({ 0, 1, 0 }))

    if encounterDeckObjects.draw == nil then
      encounterDeckObjects.draw = encounterDeckObjects.discard
    else
      encounterDeckObjects.draw = encounterDeckObjects.draw.putObject(encounterDeckObjects.discard)
    end

    if encounterDeckObjects.topCard then
      encounterDeckObjects.draw.putObject(encounterDeckObjects.topCard)
      flipTopCardFromDeck(1)
    end

    encounterDeckObjects.draw.shuffle()
    broadcastToAll("Shuffled encounter discard into deck.", "White")
    return true
  else
    if encounterDeckObjects.draw and encounterDeckObjects.topCard then
      encounterDeckObjects.draw.putObject(encounterDeckObjects.topCard)
      encounterDeckObjects.draw.shuffle()
      flipTopCardFromDeck(1)
      return true
    end

    broadcastToAll("Encounter discard pile is already empty.", "Red")
    return false
  end
end

-- utility function to flip the top card to the revealed side
function flipTopCardFromDeck(additionalDelay)
  Wait.time(function()
    local encounterDeckObjects = getEncounterDeckObjects()
    if encounterDeckObjects.topCard ~= nil then return end

    if encounterDeckObjects.draw ~= nil then
      if encounterDeckObjects.draw.type == "Card" then
        encounterDeckObjects.draw.flip()
      else
        -- get bounds to know the height of the deck
        local bounds = encounterDeckObjects.draw.getBounds()
        local pos = bounds.center + Vector(0, bounds.size.y / 2 + 0.2, 0)
        encounterDeckObjects.draw.takeObject({ position = pos, flip = true })
      end
    end
  end, 0.1 + (additionalDelay or 0))
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

-- Simple method to check if the given point is in a specified area
---@param point tts__Vector Point to check, only x and z values are relevant
---@param bounds table Defined area to see if the point is within
---@return boolean: True if the point is in the area defined by bounds
function inArea(point, bounds)
  return (point.x < bounds.upperLeft.x
    and point.x > bounds.lowerRight.x
    and point.z > bounds.upperLeft.z
    and point.z < bounds.lowerRight.z)
end

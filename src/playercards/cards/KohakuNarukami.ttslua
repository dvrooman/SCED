require("playercards/CardsWithHelper")
local blessCurseManagerApi = require("chaosbag/BlessCurseManagerApi")
local guidReferenceApi     = require("core/GUIDReferenceApi")
local playermatApi         = require("playermat/PlayermatApi")
local searchLib            = require("util/SearchLib")
local tokenManagerApi      = require("tokens/TokenManagerApi")

-- intentionally global
hasXML                     = true
isHelperEnabled            = false
local updated, loopId

local xmlData              = {
  Action    = { color = "#6D202CE6", onClick = "removeAndExtraAction" },
  Bless     = { color = "#9D702CE6", onClick = "addTokenToBag" },
  Curse     = { color = "#633A84E6", onClick = "addTokenToBag" },
  ElderSign = { color = "#50A8CEE6", onClick = "elderSignAbility" }
}

function updateSave()
  self.script_state = JSON.encode({
    isHelperEnabled = isHelperEnabled,
    loopId = loopId
  })
end

function onLoad(savedData)
  if savedData and savedData ~= "" then
    local loadedData = JSON.decode(savedData)
    isHelperEnabled = loadedData.isHelperEnabled
    loopId = loadedData.loopId
  end
  if isHelperEnabled then updateDisplay() end
end

function initialize()
  maybeUpdateButtonState()
  loopId = Wait.time(maybeUpdateButtonState, 1, -1)
end

function shutOff()
  if loopId then
    Wait.stop(loopId)
    loopId = nil
  end
end

function addTokenToBag(player, _, tokenType)
  if not updated then return end
  blessCurseManagerApi.addToken(tokenType, player.color)
  updated = false
  Wait.frames(maybeUpdateButtonState, 2)
end

function removeAndExtraAction(player)
  if not updated then return end
  blessCurseManagerApi.removeToken("Bless", player.color)
  blessCurseManagerApi.removeToken("Bless", player.color)
  blessCurseManagerApi.removeToken("Curse", player.color)
  blessCurseManagerApi.removeToken("Curse", player.color)
  updated = false
  Wait.frames(maybeUpdateButtonState, 2)

  local position = self.getPosition()
  local matColor = playermatApi.getMatColorByPosition(position)
  local mat = guidReferenceApi.getObjectByOwnerAndType(matColor, "Playermat")
  local rotation = mat.getRotation()

  -- find empty action token slots by checking snap points
  local snaps = mat.getSnapPoints()

  -- get first empty slot in the top row (so the second empty slot because of the ability token)
  local emptyPos = position -- default to card position
  for i, snap in ipairs(snaps) do
    if i > 1 then
      if snap.tags[1] == "UniversalToken" then
        local snapPos = mat.positionToWorld(snap.position)
        local searchResult = searchLib.atPosition(snapPos, "isUniversalToken")
        if #searchResult == 0 then
          emptyPos = snapPos
          break
        end
      end
    end
  end

  local callbackName = "updateUniversalActionAbilityToken"
  local callbackParams = { class = "Mystic", symbol = "Mystic" }
  tokenManagerApi.spawnToken(emptyPos + Vector(0, 0.7, 0), "universalActionAbility", rotation, callbackName, callbackParams, nil, "Temporary")
end

function elderSignAbility(player)
  blessCurseManagerApi.addToken("Bless", player.color)
  blessCurseManagerApi.addToken("Curse", player.color)
  updated = false
  Wait.frames(maybeUpdateButtonState, 2)
end

-- count tokens in the bag and show appropriate buttons
function maybeUpdateButtonState()
  local numInBag = blessCurseManagerApi.getBlessCurseInBag()
  local state = { Bless = false, Curse = false, Action = false, ElderSign = false }

  if numInBag.Bless <= numInBag.Curse and numInBag.Bless < 10 then
    state.Bless = true
    state.ElderSign = true
  end

  if numInBag.Curse <= numInBag.Bless and numInBag.Curse < 10 then
    state.Curse = true
    state.ElderSign = true
  end

  if numInBag.Curse >= 2 and numInBag.Bless >= 2 then
    state.Action = true
  end

  setUiState(state)
  updated = true
end

function setUiState(params)
  for buttonId, state in pairs(params) do
    if state then
      self.UI.setAttribute(buttonId, "color", xmlData[buttonId].color)
      self.UI.setAttribute(buttonId, "onClick", xmlData[buttonId].onClick)
      self.UI.setAttribute(buttonId, "textColor", "white")
    else
      self.UI.setAttribute(buttonId, "color", "#353535E6")
      self.UI.setAttribute(buttonId, "onClick", "errorMessage")
      self.UI.setAttribute(buttonId, "textColor", "#A0A0A0")
    end
  end
end

function errorMessage(_, _, triggeringButton)
  local numInBag = blessCurseManagerApi.getBlessCurseInBag()
  if triggeringButton == "Action" then
    broadcastToAll("There are not enough Blesses and/or Curses in the chaos bag.", "Red")
  elseif numInBag.Bless == 10 and numInBag.Curse == 10 then
    broadcastToAll("No more tokens can be added to the chaos bag.", "Red")
  elseif numInBag.Bless < numInBag.Curse then
    broadcastToAll("There are more Bless tokens than Curse tokens in the chaos bag.", "Red")
  else
    broadcastToAll("There are more Curse tokens than Bless tokens in the chaos bag.", "Red")
  end
end
